const express = require('express');
const router = express.Router();
const axios = require('axios');
const User = require('../models/User');
const Homework = require('../models/Homework');

const BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

// Webhook endpoint - Telegram will send updates here
router.post('/webhook', async (req, res) => {
  try {
    console.log('üì® Received webhook update:', req.body);
    const update = req.body;
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    
    res.send('OK');
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).send('Error');
  }
});

// Set webhook (call this once when deploying)
router.post('/set-webhook', async (req, res) => {
  try {
    const webhookUrl = process.env.BOT_WEBHOOK_URL || 'http://localhost:3000/api/bot/webhook';
    const response = await axios.post(`${TELEGRAM_API}/setWebhook`, {
      url: webhookUrl
    });
    
    console.log('‚úÖ Webhook set:', response.data);
    res.json(response.data);
  } catch (error) {
    console.error('Set webhook error:', error.response?.data || error.message);
    res.status(500).json({ error: error.message });
  }
});

// Get bot info
router.get('/info', async (req, res) => {
  try {
    const response = await axios.get(`${TELEGRAM_API}/getMe`);
    res.json(response.data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete webhook
router.delete('/webhook', async (req, res) => {
  try {
    const response = await axios.post(`${TELEGRAM_API}/deleteWebhook`);
    res.json(response.data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Message handler
async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  const user = message.from;

  console.log(`üí¨ Message from ${user.first_name} (${user.id}): ${text}`);

  try {
    // Authenticate/register user
    let dbUser = await User.findOne({ telegramId: user.id });
    if (!dbUser) {
      dbUser = new User({
        telegramId: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        username: user.username,
        role: 'student'
      });
      await dbUser.save();
      console.log(`‚úÖ New user registered: ${user.first_name}`);
    }

    // Handle commands
    if (text.startsWith('/')) {
      await handleCommand(chatId, text, dbUser);
    } else {
      await handleTextMessage(chatId, text, dbUser);
    }
  } catch (error) {
    console.error('Handle message error:', error);
    await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// Command handler
async function handleCommand(chatId, text, user) {
  const command = text.split(' ')[0];

  switch (command) {
    case '/start':
      await sendWelcomeMessage(chatId, user);
      break;
    case '/menu':
      await showMainMenu(chatId, user);
      break;
    case '/help':
      await sendHelpMessage(chatId);
      break;
    case '/homework':
      await showHomework(chatId, user);
      break;
    case '/schedule':
      await sendMessage(chatId, 'üìÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...');
      break;
    case '/test':
      await sendMessage(chatId, '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      break;
    default:
      await sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
  }
}

// Text message handler
async function handleTextMessage(chatId, text, user) {
  const menuItems = {
    'üìö –ú–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è': () => showHomework(chatId, user),
    'üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': () => sendMessage(chatId, 'üìÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...'),
    'üè¢ –ú–æ–∏ —Ñ–∏–ª–∏–∞–ª—ã': () => showBranches(chatId, user),
    'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞': () => sendMessage(chatId, 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...'),
    'üÜò –ü–æ–º–æ—â—å': () => sendHelpMessage(chatId),
    'üëã –¢–µ—Å—Ç': () => sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
  };

  if (menuItems[text]) {
    await menuItems[text]();
  } else {
    await showMainMenu(chatId, user);
  }
}

// Send welcome message
async function sendWelcomeMessage(chatId, user) {
  const welcomeText = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-–®–∫–æ–ª—É, ${user.firstName}!

–í–∞—à–∞ —Ä–æ–ª—å: ${getRoleText(user.role)}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/homework - –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
/help - –ü–æ–º–æ—â—å
/test - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
  `.trim();

  await sendMessage(chatId, welcomeText);
  await showMainMenu(chatId, user);
}

// Show main menu with keyboard
async function showMainMenu(chatId, user) {
  const keyboard = getKeyboardByRole(user.role);
  
  await sendMessage(chatId, getMenuTextByRole(user.role), keyboard);
}

// Show homework
async function showHomework(chatId, user) {
  try {
    // Create some test homework if none exists
    let homework = await Homework.find({
      $or: [
        { assignedTo: user._id },
        { assignedToGroup: user.group }
      ]
    }).populate('assignedBy', 'firstName lastName');

    if (homework.length === 0) {
      // Create test homework
      const testHomework = new Homework({
        title: "–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ Python",
        description: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç 'Hello, World!'",
        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
        assignedBy: user._id,
        assignedTo: user._id,
        organization: user.organization,
        branch: user.branch
      });
      await testHomework.save();
      homework = [testHomework];
    }

    let message = 'üìö –í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n';
    homework.forEach((hw, index) => {
      message += `${index + 1}. ${hw.title}\n`;
      message += `   üìù ${hw.description}\n`;
      if (hw.deadline) {
        message += `   üìÖ –î–æ: ${new Date(hw.deadline).toLocaleDateString('ru-RU')}\n`;
      }
      message += '\n';
    });

    await sendMessage(chatId, message);
  } catch (error) {
    console.error('Show homework error:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.');
  }
}

// Show branches for director
async function showBranches(chatId, user) {
  if (user.role !== 'director' && user.role !== 'admin') {
    await sendMessage(chatId, '‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    return;
  }

  try {
    const Branch = require('../models/Branch');
    const branches = await Branch.find({ 
      $or: [
        { director: user._id },
        { organization: user.organization }
      ]
    }).populate('organization', 'name')
      .populate('director', 'firstName lastName');

    if (branches.length === 0) {
      await sendMessage(chatId, 'üè¢ –§–∏–ª–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    let message = 'üè¢ –§–∏–ª–∏–∞–ª—ã:\n\n';
    branches.forEach((branch, index) => {
      message += `${index + 1}. ${branch.name}\n`;
      message += `   üìç ${branch.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `   üìû ${branch.contactPhone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      if (branch.director) {
        message += `   üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${branch.director.firstName} ${branch.director.lastName}\n`;
      }
      message += '\n';
    });

    await sendMessage(chatId, message);
  } catch (error) {
    console.error('Show branches error:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª–∏–∞–ª–æ–≤.');
  }
}

// Send help message
async function sendHelpMessage(chatId) {
  const helpText = `
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É IT-–®–∫–æ–ª—ã**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/homework - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/test - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: support@genius-school.ru

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
  `.trim();

  await sendMessage(chatId, helpText);
}

// Utility function to send message
async function sendMessage(chatId, text, replyMarkup = null) {
  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };

    if (replyMarkup) {
      payload.reply_markup = replyMarkup;
    }

    const response = await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
    console.log(`‚úÖ Message sent to ${chatId}`);
    return response.data;
  } catch (error) {
    console.error('Send message error:', error.response?.data || error.message);
  }
}

// Get keyboard by role
function getKeyboardByRole(role) {
  const keyboards = {
    student: {
      keyboard: [
        ['üìö –ú–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        ['üÜò –ü–æ–º–æ—â—å', 'üëã –¢–µ—Å—Ç']
      ],
      resize_keyboard: true
    },
    parent: {
      keyboard: [
        ['üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ—Ç–µ–π', 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–µ–π'],
        ['üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', 'üë®‚Äçüë¶ –ú–æ–∏ –¥–µ—Ç–∏']
      ],
      resize_keyboard: true
    },
    teacher: {
      keyboard: [
        ['‚úèÔ∏è –í—ã–¥–∞—Ç—å –î–ó', '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –î–ó'],
        ['üìä –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç', 'üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']
      ],
      resize_keyboard: true
    },
    director: {
      keyboard: [
        ['üè¢ –ú–æ–∏ —Ñ–∏–ª–∏–∞–ª—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞'],
        ['üë• –ü–µ—Ä—Å–æ–Ω–∞–ª', 'üìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞']
      ],
      resize_keyboard: true
    },
    admin: {
      keyboard: [
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
        ['üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥']
      ],
      resize_keyboard: true
    }
  };

  return keyboards[role] || {
    keyboard: [['üÜò –ü–æ–º–æ—â—å', 'üëã –¢–µ—Å—Ç']],
    resize_keyboard: true
  };
}

// Get menu text by role
function getMenuTextByRole(role) {
  const menus = {
    student: 'üë®‚Äçüéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞',
    parent: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è', 
    teacher: 'üë®‚Äçüè´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
    director: 'üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è',
    admin: '‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
  };
  return menus[role] || '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
}

// Get role text
function getRoleText(role) {
  const roles = {
    student: 'üë®‚Äçüéì –£—á–µ–Ω–∏–∫',
    parent: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å',
    teacher: 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    director: 'üè¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
    admin: '‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
  };
  return roles[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// Handle callback queries (for inline buttons)
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  console.log(`üîò Callback query: ${data}`);

  // Handle different callback actions
  switch (data) {
    case 'get_homework':
      await showHomework(chatId, callbackQuery.from);
      break;
    case 'get_schedule':
      await sendMessage(chatId, 'üìÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...');
      break;
    default:
      await sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
  }

  // Answer callback query to remove loading state
  try {
    await axios.post(`${TELEGRAM_API}/answerCallbackQuery`, {
      callback_query_id: callbackQuery.id
    });
  } catch (error) {
    console.error('Answer callback error:', error);
  }
}

module.exports = router;