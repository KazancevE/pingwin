import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';
import Header from './components/Header';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';

function App() {
  const [health, setHealth] = useState(null);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkHealth();
    loadUsers();
  }, []);

  const checkHealth = async () => {
    try {
      const response = await axios.get(`${API_URL}/health`);
      setHealth(response.data);
    } catch (error) {
      console.error('Health check failed:', error);
      setHealth({ status: 'ERROR', error: error.message });
    }
  };

  const loadUsers = async () => {
    try {
      const response = await axios.get(`${API_URL}/users`);
      setUsers(response.data);
      setLoading(false);
    } catch (error) {
      console.error('Failed to load users:', error);
      setLoading(false);
    }
  };

  const setWebhook = async () => {
    try {
      const response = await axios.post(`${API_URL}/bot/set-webhook`);
      alert(`Webhook set: ${JSON.stringify(response.data)}`);
    } catch (error) {
      alert(`Error setting webhook: ${error.message}`);
    }
  };

  const getBotInfo = async () => {
    try {
      const response = await axios.get(`${API_URL}/bot/info`);
      alert(`Bot info: ${JSON.stringify(response.data)}`);
    } catch (error) {
      alert(`Error getting bot info: ${error.message}`);
    }
  };

  return (
    <div className="App">
      <Header />
      
      <div className="container">
        <section className="health-section">
          <h2>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
          {health ? (
            <div className={`health-status ${health.status === 'OK' ? 'healthy' : 'error'}`}>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {health.status}</p>
              <p><strong>–í—Ä–µ–º—è:</strong> {new Date(health.timestamp).toLocaleString()}</p>
              {health.services && (
                <div>
                  <p><strong>–°–µ—Ä–≤–∏—Å—ã:</strong></p>
                  <ul>
                    <li>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {health.services.database}</li>
                    <li>Telegram Bot: {health.services.bot}</li>
                  </ul>
                </div>
              )}
            </div>
          ) : (
            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</p>
          )}
        </section>

        <section className="bot-controls">
          <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</h2>
          <div className="button-group">
            <button onClick={setWebhook} className="btn btn-primary">
              –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook
            </button>
            <button onClick={getBotInfo} className="btn btn-secondary">
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            </button>
          </div>
        </section>

        <section className="users-section">
          <h2>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
          {loading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
          ) : (
            <div className="users-grid">
              {users.map(user => (
                <div key={user._id} className="user-card">
                  <h3>{user.firstName} {user.lastName}</h3>
                  <p><strong>–†–æ–ª—å:</strong> {user.role}</p>
                  <p><strong>Email:</strong> {user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                  <p><strong>Telegram ID:</strong> {user.telegramId || '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}</p>
                  <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {user.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</p>
                </div>
              ))}
            </div>
          )}
        </section>

        <section className="features">
          <h2>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</h2>
          <div className="features-grid">
            <div className="feature-card">
              <h3>üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</h3>
              <p>–í—ã–¥–∞—á–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π</p>
            </div>
            <div className="feature-card">
              <h3>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h3>
              <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</p>
            </div>
            <div className="feature-card">
              <h3>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</h3>
              <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</p>
            </div>
            <div className="feature-card">
              <h3>üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏</h3>
              <p>–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏</p>
            </div>
            <div className="feature-card">
              <h3>ü§ñ Telegram –±–æ—Ç</h3>
              <p>–£–¥–æ–±–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</p>
            </div>
            <div className="feature-card">
              <h3>üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
              <p>SSL —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö</p>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}

export default App;